//Accelerometer Sensor
//Matt @ http://antipastohw.blogspot.com/
//Author of original code base: Marcos Yarza, Malmo University - Sweden, http://www.0j0.org
//edits by david betancourt and heightValue torvalds

//Pin definitions
int xaccPin = 8;
int yaccPin = 49;
int heightValue = 5;

//Global variables
long xacc = 0;
long yacc = 0;

#include <SoftwareSerial.h>
#define Rx 10 // DOUT to pin 10
#define Tx 11 // DIN to pin 11
int led = 3; // this may vary based on your hardware configuration.
int button = 9; // this may vary based on your hardware configuration.

SoftwareSerial Xbee (Rx, Tx);

void setup() {
  Serial.begin(9600); // Sets the baud rate to 9600
  Xbee.begin(9600); // type a char, then hit enter
  delay(500); // wait half a second
  pinMode(led, OUTPUT);
  pinMode(button, INPUT);
  pinMode(31, OUTPUT);
  pinMode(32, OUTPUT);
  pinMode(33, OUTPUT);
  pinMode(34, OUTPUT);
  pinMode(35, OUTPUT);
  pinMode(36, OUTPUT);
  pinMode(37, OUTPUT);
  pinMode(xaccPin, INPUT);
  pinMode(yaccPin, INPUT);

  //clear the initial pin readouts
  digitalWrite(31, LOW); digitalWrite(32, LOW);
  digitalWrite(33, LOW); digitalWrite(34, LOW);
  digitalWrite(35, LOW); digitalWrite(36, LOW);
  digitalWrite(37, LOW);
}

long readAcceleration(int axe) {
  int count = 0;
  long accel = 0;
  int value = 0;

  value = digitalRead(axe);
  while (value == HIGH) { // Loop until pin reads a low
    value = digitalRead(axe);
  }

  while (value == LOW) { // Loop until pin reads a high
    value = digitalRead(axe);
  }

  while (value == HIGH) { // Loop until pin reads a low and count
    value = digitalRead(axe);
    count = count + 1;
  }
  accel = count;
  return accel;
}

void loop() {
  // variables to read the pulse widths:
  int pulseX, pulseY;
  // variables to contain the resulting accelerations
  int accX, accY;

  // read pulse from x- and y-axes:
  pulseX = pulseIn(xaccPin, HIGH);
  pulseY = pulseIn(yaccPin, HIGH);

  // convert the pulse width into acceleration
  // accelerationX and accelerationY are in milli-g's:
  // earth's gravity is 1000 milli-g's, or 1g.
  accX = ((pulseX / 10) - 500) * 8;
  accY = ((pulseY / 10) - 500) * 8;
  //Grab the accelerometer readings:
  //xacc = readAcceleration(xaccPin); //reads and represents acceleration X
  //yacc = readAcceleration(yaccPin); //reads and represents acceleration Y

  //Print the output to the serial port:
  Serial.print("X:");
  Serial.print(accX);
  Serial.print(" Y:");
  Serial.print(accY);
  Serial.print("\n\r");

  //Change the status of the LEDs depending on which direction the board is facing
  if (accX < -365) {
    digitalWrite(31, HIGH);
    digitalWrite(32, LOW);
    digitalWrite(33, HIGH);
    digitalWrite(34, HIGH);
    digitalWrite(35, LOW);
    digitalWrite(36, HIGH);
    digitalWrite(37, HIGH);
    heightValue = 2;
  }
  else if (accX < -190) {
    digitalWrite(31, HIGH);
    digitalWrite(32, HIGH);
    digitalWrite(33, LOW);
    digitalWrite(34, LOW);
    digitalWrite(35, LOW);
    digitalWrite(36, LOW);
    digitalWrite(37, LOW);
    heightValue = 1;
  }
  else if (accX < 45) {
    digitalWrite(31, HIGH);
    digitalWrite(32, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(34, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(36, HIGH);
    digitalWrite(37, LOW);
    heightValue = 0;
  }
  //if (yacc > 1200) {
  //digitalWrite(5, HIGH);
  //} else {
  //digitalWrite(5, LOW);
  //}

  delay(100);

  //begin xbee comm code
  int pushed = 0; // the button is *not* pushed by default
  pushed = digitalRead(button);
  if (heightValue == 0) { // Is the button pushed?
    char outgoing = '0'; // sets outgoing character to s
    Xbee.print(outgoing);
    delay(500);
  }
  else if (heightValue == 1) {
    char outgoing = '1';
    Xbee.print(outgoing);
    delay(500);
  }
  else if (heightValue == 2) {
    char outgoing = '2';
    Xbee.print(outgoing);
    delay(500);
  }
  if (Xbee.available()) { // Is data a vailable from XBee?
    char incoming = Xbee.read(); // Read character,
    Serial.println(incoming); // send to Serial Monitor
    if (incoming) {
      digitalWrite(led, HIGH); // switches on the light if signal is received
      delay(500); // waits half a second
      digitalWrite(led, LOW); // turns off LED
    }
  }
  delay(50);
}
