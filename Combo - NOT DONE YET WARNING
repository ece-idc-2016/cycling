//Accelerometer Sensor
//Matt @ http://antipastohw.blogspot.com/
//Author of original code base: Marcos Yarza, Malmo University - Sweden, http://www.0j0.org
//edits by david betancourt and heightValue torvalds

//begin line following variables
#include <Servo.h>                           // Use the Servo library (included with Arduino IDE)  
Servo servoL;                                // Define the left and right servos
Servo servoR;

int farLP = 2;
int centerLP = 5;
int centerRP = 6;
int farRP = 7;
int Left = 0;
int Right = 0;
//end line following variables

//begin xbee variables
#include <SoftwareSerial.h>
#define Rx 10 // DOUT to pin 10
#define Tx 11 // DIN to pin 11
#define LED4 31 // change to fit your own LED configuration
#define LED3 33
#define LED2 35
#define LED1 37
int led = 3; // this may vary based on your hardware configuration.
int button = 9; // this may vary based on your hardware configuration.

SoftwareSerial Xbee (Rx, Tx);
//end xbee variables

//Pin definitions
int xaccPin = 8;
int yaccPin = 49;
int heightValue = 5;

//Global variables
long xacc = 0;
long yacc = 0;

#include <SoftwareSerial.h>
#define Rx 10 // DOUT to pin 10
#define Tx 11 // DIN to pin 11

void setup() {
  Serial.begin(9600); // Sets the baud rate to 9600
  Xbee.begin(9600); // type a char, then hit enter
  delay(500); // wait half a second
  servoL.attach(13);                         // Attach (programmatically connect) servos to pins on Arduino
  servoR.attach(12);
  pinMode(led, OUTPUT);
  pinMode(button, INPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED1, OUTPUT);
  delay(500); // wait half a second
  pinMode(led, OUTPUT);
  pinMode(button, INPUT);
  pinMode(31, OUTPUT);
  pinMode(32, OUTPUT);
  pinMode(33, OUTPUT);
  pinMode(34, OUTPUT);
  pinMode(35, OUTPUT);
  pinMode(36, OUTPUT);
  pinMode(37, OUTPUT);
  pinMode(xaccPin, INPUT);
  pinMode(yaccPin, INPUT);

  //clear the initial pin readouts
  digitalWrite(31, LOW); digitalWrite(32, LOW);
  digitalWrite(33, LOW); digitalWrite(34, LOW);
  digitalWrite(35, LOW); digitalWrite(36, LOW);
  digitalWrite(37, LOW);
}

//linefollowing
long RCTime(int sensorIn) {
  long duration = 0;
  pinMode(sensorIn, OUTPUT);     // Make pin OUTPUT
  digitalWrite(sensorIn, HIGH);  // Pin HIGH (discharge capacitor)
  delay(1);                      // Wait 1ms
  pinMode(sensorIn, INPUT);      // Make pin INPUT
  digitalWrite(sensorIn, LOW);   // Turn off internal pullups
  while (digitalRead(sensorIn)) { // Wait for pin to go LOW
    duration++;
  }
  return duration;
}
int isHighfR(int rctime) {
  if (rctime < 5)
    return 0;
  else
    return 1;
}
int isHighCR(int rctime) {
  if (rctime < 20)
    return 0;
  else
    return 1;
}
int isHighCL(int rctime) {
  if (rctime < 15)
    return 0;
  else
    return 1;
}
int isHighfL(int rctime) {
  if (rctime < 15)
    return 0;
  else
    return 1;
}


long readAcceleration(int axe) {
  int count = 0;
  long accel = 0;
  int value = 0;

  value = digitalRead(axe);
  while (value == HIGH) { // Loop until pin reads a low
    value = digitalRead(axe);
  }

  while (value == LOW) { // Loop until pin reads a high
    value = digitalRead(axe);
  }

  while (value == HIGH) { // Loop until pin reads a low and count
    value = digitalRead(axe);
    count = count + 1;
  }
  accel = count;
  return accel;
}

void loop() {
  //line following:
  pinMode(farLP, OUTPUT);
  pinMode(centerLP, OUTPUT);
  pinMode(centerRP, OUTPUT);
  pinMode(farRP, OUTPUT);

  digitalWrite(farLP, HIGH);
  digitalWrite(centerLP, HIGH);
  digitalWrite(centerRP, HIGH);
  digitalWrite(farRP, HIGH);
  delayMicroseconds(230); // allow capcitor charge in QTI

  pinMode(farLP, INPUT);
  pinMode(centerLP, INPUT);
  pinMode(centerRP, INPUT);
  pinMode(farRP, INPUT);

  digitalWrite(farLP, LOW);
  digitalWrite(centerLP, LOW);
  digitalWrite(centerRP, LOW);
  digitalWrite(farRP, LOW);

  delayMicroseconds(230);

  int pin4 = isHighfR(RCTime(farRP));
  int pin1 = isHighCR(RCTime(centerRP));
  int pin2 = isHighCL(RCTime(centerLP));
  int pin3 = isHighfL(RCTime(farLP));
  Serial.println(RCTime(centerLP));
  //Serial.println(isHighCR(RCTime(farRP)));
  String s = String(pin1) + String(pin2) + String(pin3) + String(pin4);
  int pins = s.toInt();
  Serial.println(pins);

  // Determine how to steer based on state of the four QTI sensors
  int vL, vR;
  switch (pins)                              // Compare pins to known line following states
  {
    case 1000:
      vL = -200;                             // -100 to 100 indicate course correction values
      vR = 200;                              // -100: full reverse; 0=stopped; 100=full forward
      Left = Left + 1;
      break;
    case 1100:
      vL = -200;
      vR = 0;
      Left = Left + 1;
      break;
    case 101:
      vL = -200;
      vR = -200;
    case 1010:
      vL = 200;
      vR = 200;
    case 100:
      vL = -200;
      vR = 200;
      Left = Left + 1;
      break;
    case 110:
      vL = 100;
      vR = 100;
      break;
    case 10:
      vL = 200;
      vR = 200;
      break;
    case 11:
      vL = 0;
      vR = -200;
      Right = Right + 1;
      break;
    case 1:
      vL = 200;
      vR = -200;
      Right = Right + 1;
      break;
    case 1110:
      vL = -200;
      vR = 200;
      Left = Left + 1;
      break;
    case 111:
      vL = 200;
      vR = -200;
      Right = (Right + 1);
      break;
    case 1111:
      servoL.writeMicroseconds(1300);         // Left wheel counterclockwise REMOVED FOR 4/7 DEMO, PUT BACK AFTER
      servoR.writeMicroseconds(1300);        // Right wheel clockwise
      delay(650); //this may change                               // ...for 3 seconds
      servoL.detach();                        // Stop sending servo signals
      servoR.detach();

      break;
    case 0000:
      vL = 0;
      vR = 0;
      break;
  }

  servoL.writeMicroseconds(1500 + vL);      // Steer robot to recenter it over the line
  servoR.writeMicroseconds(1500 - vR);

  delay(50);

  //begin xbee loop code (button)
  int pushed = 0; // the button is *not* pushed by default
  pushed = digitalRead(button);
  if (pushed == HIGH) { // Is the button pushed?
    char outgoing = 'Q'; // sets outgoing character to s
    Xbee.print(outgoing);
    delay(500);

  }
  if (Xbee.available()) { // Is data a vailable from XBee?
    char incoming = Xbee.read(); // Read character,
    Serial.println(incoming); // send to Serial Monitor
    if (incoming) {
      digitalWrite(led, HIGH); // switches on the light if signal is received
      delay(500); // waits half a second
      digitalWrite(led, LOW); // turns off LED
    }
  }
  delay(50);

  // HEIGHT SENSING
  // variables to read the pulse widths:
  int pulseX, pulseY;
  // variables to contain the resulting accelerations
  int accX, accY;

  // read pulse from x- and y-axes:
  pulseX = pulseIn(xaccPin, HIGH);
  pulseY = pulseIn(yaccPin, HIGH);

  // convert the pulse width into acceleration
  // accelerationX and accelerationY are in milli-g's:
  // earth's gravity is 1000 milli-g's, or 1g.
  accX = ((pulseX / 10) - 500) * 8;
  accY = ((pulseY / 10) - 500) * 8;
  //Grab the accelerometer readings:
  //xacc = readAcceleration(xaccPin); //reads and represents acceleration X
  //yacc = readAcceleration(yaccPin); //reads and represents acceleration Y

  //Print the output to the serial port:
  Serial.print("X:");
  Serial.print(accX);
  Serial.print(" Y:");
  Serial.print(accY);
  Serial.print("\n\r");

  //Change the status of the LEDs depending on which direction the board is facing
  if (accX < -365) {
    digitalWrite(31, HIGH);
    digitalWrite(32, LOW);
    digitalWrite(33, HIGH);
    digitalWrite(34, HIGH);
    digitalWrite(35, LOW);
    digitalWrite(36, HIGH);
    digitalWrite(37, HIGH);
    heightValue = 2;
  }
  else if (accX < -190) {
    digitalWrite(31, HIGH);
    digitalWrite(32, HIGH);
    digitalWrite(33, LOW);
    digitalWrite(34, LOW);
    digitalWrite(35, LOW);
    digitalWrite(36, LOW);
    digitalWrite(37, LOW);
    heightValue = 1;
  }
  else if (accX < 45) {
    digitalWrite(31, HIGH);
    digitalWrite(32, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(34, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(36, HIGH);
    digitalWrite(37, LOW);
    heightValue = 0;
  }
  //if (yacc > 1200) {
  //digitalWrite(5, HIGH);
  //} else {
  //digitalWrite(5, LOW);
  //}

  delay(100);

  //begin xbee comm code
  pushed = digitalRead(button);
  if (heightValue == 0) { // Is the button pushed?
    char outgoing = '0'; // sets outgoing character to s
    Xbee.print(outgoing);
    delay(500);
  }
  else if (heightValue == 1) {
    char outgoing = '1';
    Xbee.print(outgoing);
    delay(500);
  }
  else if (heightValue == 2) {
    char outgoing = '2';
    Xbee.print(outgoing);
    delay(500);
  }
  if (Xbee.available()) { // Is data a vailable from XBee?
    char incoming = Xbee.read(); // Read character,
    Serial.println(incoming); // send to Serial Monitor
    if (incoming) {
      digitalWrite(led, HIGH); // switches on the light if signal is received
      delay(500); // waits half a second
      digitalWrite(led, LOW); // turns off LED
    }
  }
  delay(50);


}
